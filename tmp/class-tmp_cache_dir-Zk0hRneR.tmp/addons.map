{"version":3,"sources":["ember-cli-bootstrap/utils/test-breadcrumbs.js","ember-cli-bootstrap/utils/test-helper.js","__reexport.js","ember-idx-modal/modal-body.js","ember-idx-modal/modal-confirm-with-reason.js","ember-idx-modal/modal-confirm.js","ember-idx-modal/modal-emform.js","ember-idx-modal/modal-footer.js","ember-idx-modal/modal-form.js","ember-idx-modal/modal-title.js","ember-idx-modal/modal-toggler.js","ember-idx-modal/modal.js","__reexport.js","ember-idx-utils/config.js","ember-idx-utils/mixin/hotkeys-bindings.js","ember-idx-utils/mixin/style-bindings.js","ember-idx-utils/mixin/with-config.js","ember-idx-utils/utils/delay.js","__reexport.js"],"sourcesContent":["define(\"ember-cli-bootstrap/utils/test-breadcrumbs\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    Bootstrap.BsBreadcrumbsItem = Bootstrap.ItemView.extend({\n      tagName: ['li'],\n      classNameBindings: [\"isActive:active\"],\n      template: Ember.Handlebars.compile('{{#unless view.isActive}}{{#if view.content.model}}{{#link-to view.content.route model.id}}{{view.content.name}}{{/link-to}}{{else}}{{#link-to view.content.route}}{{view.content.name}}{{/link-to}}{{/if}}{{else}}{{view.content.name}}{{/unless}}'),\n      isActive: (function() {\n        return this.get('content.active');\n      }).property('content.active')\n    });\n\n    Bootstrap.BsBreadcrumbs = Bootstrap.ItemsView.extend(Bootstrap.WithRouter, {\n      tagName: ['ol'],\n      classNames: ['breadcrumb'],\n      currentPathObserver: (function() {\n        this.get('router');\n        return this.send('updateCrumbsByRoute');\n      }).observes('router.url').on('init'),\n      content: [],\n      itemViewClass: Bootstrap.BsBreadcrumbsItem,\n      nameDictionary: void 0,\n      dictionaryNamePrefix: 'breadcrumbs',\n      actions: {\n        currentPathDidChange: function() {\n          return this.send('updateCrumbsByRoute');\n        },\n        updateCrumbsByRoute: function() {\n          var routes,\n          _this = this;\n          this.get('content').clear();\n          routes = this.get('container').lookup('router:main');\n          routes.get('router.currentHandlerInfos').forEach(function(route, i, arr) {\n            var crumb, displayName, name, routeName, _ref, _ref1, _ref2;\n            name = route.name;\n            if (name.indexOf('.index') !== -1 || name === 'application') {\n              return;\n            }\n            if ((_ref = route.handler.breadcrumbs) != null ? _ref.hidden : void 0) {\n              return;\n            }\n            routeName = route.handler.routeName;\n            if ((_ref1 = route.handler.breadcrumbs) != null ? _ref1.name : void 0) {\n              displayName = route.handler.breadcrumbs.name;\n            } else if ((_ref2 = _this.get('nameDictionary')) != null ? _ref2[\"\" + _this.dictionaryNamePrefix + \".\" + routeName] : void 0) {\n              displayName = _this.get('nameDictionary')[\"\" + _this.dictionaryNamePrefix + \".\" + routeName];\n            } else {\n              displayName = route.handler.routeName.split('.').pop();\n              displayName = displayName[0].toUpperCase() + displayName.slice(1).toLowerCase();\n            }\n            crumb = Ember.Object.create({\n              route: route.handler.routeName,\n              name: displayName,\n              model: null\n            });\n            if (_this.get('content').length === 0) {\n              crumb.set('icon', 'fa fa-home home-icon');\n            }\n            if (route.isDynamic) {\n              crumb.setProperties({\n                model: route.handler.context,\n                name: route.handler.context.get('name')\n              });\n            }\n            return _this.get('content').pushObject(crumb);\n          });\n          return this.get('content.lastObject').set('active', true);\n        }\n      }\n    });\n\n    __exports__[\"default\"] = Bootstrap.BsBreadcrumbs;\n  });","define(\"ember-cli-bootstrap/utils/test-helper\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = function testHelper(value, options) {\n      return new Ember.Handlebars.SafeString('you just used the test-helper with a value of: <b>' + value + '</b>');\n    };\n  });","define(\"ember-cli-bootstrap\", [\"ember-cli-bootstrap/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-idx-modal/modal-body\", \n  [\"ember\",\"ember-idx-utils/mixin/with-config\",\"ember-idx-utils/mixin/style-bindings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var WithConfigMixin = __dependency2__[\"default\"];\n    var StyleBindingsMixin = __dependency3__[\"default\"];\n\n    /**\n     * `{{em-modal-body}}` component.\n     *\n     * The body of the modal\n     *\n     * @class ModalBody\n     * @public\n     */\n    __exports__[\"default\"] = Em.Component.extend(WithConfigMixin, StyleBindingsMixin, {\n      classNameBindings: ['styleClasses'],\n\n      /**\n       * The CSS classes that will be attached to the DOM element of the modal\n       * Classes should be configured externally by using the `config` object.\n       *\n       * @property styleClasses\n       * @private\n       * @type String\n       */\n      styleClasses: (function() {\n        var _ref;\n        return (_ref = this.get('config.modal.bodyClasses')) != null ? _ref.join(\" \") : undefined;\n      }).property()\n    });\n  });","define(\"ember-idx-modal/modal-confirm-with-reason\", \n  [\"ember-idx-modal/modal-confirm\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var ModalConfirm = __dependency1__[\"default\"];\n\n    /*\n     * A confirmation modal with a reason\n     * @class ModalConfirmWithReason\n     */\n    __exports__[\"default\"] = ModalConfirm.extend({\n      reasonModal: true,\n\n      /*\n       * If true a reason must be selected\n       */\n      required: true,\n\n      /*\n       * Add '--select--' option\n       */\n      'add-select-option': true,\n\n      /*\n       * Reason options\n       */\n      reasons: void 0,\n\n      /*\n       * If true, another reason 'other' will be added.\n       * When user selects 'other', a textbox will be visibile to input the reason\n       */\n      other: true,\n\n      /*\n       * The chosen reason\n       */\n      reason: void 0\n    });\n  });","define(\"ember-idx-modal/modal-confirm\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n\n    /**\n     * A confirmation modal with 'Yes' & 'No' buttons\n     * When 'no' is pressed the modal is just closed.\n     * When 'yes' is pressed an action bound to the action on the controller set in the `confirm` property is invoked, \n     * giving the controller a chance to decide whether to close the modal or not.\n     *\n     * @class ModalConfirm\n     */\n    __exports__[\"default\"] = Em.Component.extend({\n      /**\n       * Bound to the action on the controller to be invoked when the 'yes' button is pressed.\n       * @property confirm\n       * @public\n       */\n      confirm: \"confirm\",\n\n      /**\n       * The default title of the modal if not set otherwise.\n       *\n       * @property title\n       * @public\n       */\n      title: 'Please confirm',\n\n      /**\n       * The default message of the modal if not set otherwise.\n       *\n       * @property message\n       * @public\n       */\n      message: 'Please press Yes to confirm the operation.',\n      'modal-title-classes': '',\n      'cancel-button-title': 'No',\n      'cancel-button-icons': 'fa fa-thumbs-o-down',\n      'cancel-button-classes': 'btn btn-primary',\n      'submit-button-classes': 'btn btn-default',\n      'submit-button-title': 'Yes',\n      'submit-button-submitting-title': 'Submitting...',\n      'submit-button-default-icons': 'fa fa-thumbs-o-up',\n      'submit-button-execute-icons': 'fa fa-spinner fa-spin',\n      actions: {\n\n        /**\n         * Invoked when the user clicks the \"Yes\" button, triggers an action on the controller.\n         * \n         * @method confirmPressed\n         * @private\n         */\n        confirmPressed: function(setPromise) {\n          return this.sendAction('confirm', setPromise);\n        }\n      }\n    });\n  });","define(\"ember-idx-modal/modal-emform\", \n  [\"ember\",\"ember-idx-modal/modal-form\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var FormModal = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = FormModal.extend({\n      classNameBindings: ['form'],\n      attributeBindings: ['role'],\n      role: 'form',\n      model: void 0,\n      submit_button: false\n    });\n  });","define(\"ember-idx-modal/modal-footer\", \n  [\"ember\",\"ember-idx-utils/mixin/with-config\",\"ember-idx-utils/mixin/style-bindings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var WithConfigMixin = __dependency2__[\"default\"];\n    var StyleBindingsMixin = __dependency3__[\"default\"];\n\n    /**\n     * `{{em-modal-footer}}` component.\n     *\n     * The footer of the modal\n     *\n     * @class ModalFooter\n     * @public\n     */\n    __exports__[\"default\"] = Em.Component.extend(WithConfigMixin, StyleBindingsMixin, {\n      classNameBindings: ['styleClasses'],\n\n      /**\n       * The CSS classes that will be attached to the DOM element of the modal\n       * Classes should be configured externally by using the `config` object.\n       *\n       * @property styleClasses\n       * @private\n       * @type String\n       */\n      styleClasses: (function() {\n        var _ref;\n        return (_ref = this.get('config.modal.footerClasses')) != null ? _ref.join(\" \") : void 0;\n      }).property()\n    });\n  });","define(\"ember-idx-modal/modal-form\", \n  [\"ember\",\"ember-idx-modal/modal\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var Modal = __dependency2__[\"default\"];\n\n    /**\n     * A flavour of a {{#crossLink \"Modal}}Modal{{/crossLink}} that handles form submission right.\n     * @class ModalForm\n     */\n    __exports__[\"default\"] = Modal.extend({\n      tagName: 'form',\n      attributeBindings: ['in-async'],\n      'in-async': null,\n      'close-if-error': false,\n      submitted: false,\n      error: null,\n      layoutName: 'components/em-modal',\n\n      /**\n       * Handle form submit event.\n       * Submit the form, if the event returns a promise, then wait for the promise to be fulfilled first before\n       * closing the modal, if the promise returned an error, then the `error` property will be set with the given error object of the\n       * promise, when error occurs, the modal will only get closed if the `close-if-error` property isn't set to false\n       *\n       * @method submitForm\n       * @private\n       */\n      submitForm: (function(e) {\n        e.preventDefault();\n        this.sendAction('on-submit', this, e);\n        this.set('submitted', true);\n        if (e.promise && \"function\" === typeof e.promise.then) {\n          this.set('in-async', 'true');\n          return e.promise.then((function(_this) {\n            return function(r) {\n              _this.set('in-async', null);\n              return _this.close();\n            };\n          })(this), (function(_this) {\n            return function(err) {\n              _this.set('in-async', null);\n              _this.set('error', err);\n              if (_this.get('close-if-error')) {\n                return _this.close();\n              }\n            };\n          })(this));\n        } else {\n          return this.close();\n        }\n      }).on('submit'),\n      close: function() {\n        this.set('error', null);\n        if (!this.get('submitted')) {\n          this.sendAction('on-cancel', this);\n        }\n        return this._super.apply(this, arguments);\n      }\n    });\n  });","define(\"ember-idx-modal/modal-title\", \n  [\"ember\",\"ember-idx-utils/mixin/with-config\",\"ember-idx-utils/mixin/style-bindings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var WithConfigMixin = __dependency2__[\"default\"];\n    var StyleBindingsMixin = __dependency3__[\"default\"];\n\n    /**\n     * `{{em-modal-title}}` component.\n     *\n     * The title of the modal\n     *\n     * @class ModalTitle\n     * @public\n     */\n\n    __exports__[\"default\"] = Em.Component.extend(WithConfigMixin, StyleBindingsMixin, {\n      classNameBindings: ['styleClasses', 'classes'],\n\n      /**\n       * The CSS classes that will be attached to the DOM element of the modal\n       * Classes should be configured externally by using the `config` object.\n       *\n       * @property styleClasses\n       * @private\n       * @type String\n       */\n      styleClasses: (function() {\n        var _ref;\n        return (_ref = this.get('config.modal.titleClasses')) != null ? _ref.join(\" \") : void 0;\n      }).property(),\n\n      /**\n       * Register the title within the modal\n       * Note: Expects this title to be the direct descendant of the modal component\n       *\n       * @method registerInModal\n       * @private\n       */\n      registerInModal: function() {\n        return (this.get('parentView').setTitle(this)).on('init');\n      }\n    });\n  });","define(\"ember-idx-modal/modal-toggler\", \n  [\"ember\",\"ember-idx-modal/modal\",\"ember-idx-utils/mixin/with-config\",\"ember-idx-utils/mixin/style-bindings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var Modal = __dependency2__[\"default\"];\n    var WithConfigMixin = __dependency3__[\"default\"];\n    var StyleBindingsMixin = __dependency4__[\"default\"];\n\n    /**\n     * `{{em-modal-toggler}}` component.\n     *\n     * A component to toggle the visibility of a modal\n     *\n     * @class ModalToggler\n     * @event on-toggle triggered when the toggler is clicked before changing the visibility of the modal\n     *   @param toggler Toggler - This instance of the toggler\n     * @public\n     */\n\n    __exports__[\"default\"] = Em.Component.extend(WithConfigMixin, StyleBindingsMixin, {\n      attributeBindings: ['disabled', 'type'],\n      tagName: 'button',\n      classNameBindings: ['styleClasses'],\n      type: 'button',\n\n      /**\n       * The CSS classes that will be attached to the DOM element of the modal\n       * Classes should be configured externally by using the `config` object.\n       *\n       * @property styleClasses\n       * @private\n       * @type String\n       */\n      styleClasses: (function() {\n        var _ref;\n        return (_ref = this.get('config.modal.togglerClasses')) != null ? _ref.join(\" \") : void 0;\n      }).property(),\n\n      /**\n       * Toggle the visibility of the modal that this toggler controls.\n       *\n       * @method toggleVisibility\n       * @private\n       */\n      toggleVisibility: (function() {\n        this.sendAction('on-toggle', this);\n        return this.get('modal').toggleVisibility();\n      }).on('click'),\n\n      /**\n       * Find the modal view and set it as a `modal` property\n       * A toggler can live as a descendant (not neccessarily a direct one) of a modal or outside of the modal chain\n       * TODO: Assert modal existance\n       * @method modalAsProperty\n       */\n      modalAsProperty: (function() {\n        var modalAsAncestor;\n        modalAsAncestor = this.nearestOfType(Modal);\n        if (modalAsAncestor) {\n          return this.set('modal', modalAsAncestor);\n        } else {\n          return Em.run.schedule('afterRender', this, function() {\n            return this.set('modal', Em.View.views[this.get('modal-id')]);\n          });\n        }\n      }).on('willInsertElement')\n    });\n  });","define(\"ember-idx-modal/modal\", \n  [\"ember\",\"ember-idx-utils/mixin/with-config\",\"ember-idx-utils/mixin/style-bindings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    //(c) 2014 Indexia, Inc.\n    var Em = __dependency1__[\"default\"];\n    var WithConfigMixin = __dependency2__[\"default\"];\n    var StyleBindingsMixin = __dependency3__[\"default\"];\n\n    /**\n     * `{{em-modal}}` component.\n     *\n     * Define a modal component that can be opened and closed, the modal visibility is controlled by the \n     * {{#crossLink \"ModalToggler\"}}ModalToggler{{/crossLink}} component.\n     *\n     * ```handlebars\n     * {{#em-modal id=\"modal1\"}}\n     *   {{#em-modal-title}}\n     *     {{#em-modal-toggler}}<span>&times;</span>{{/em-modal-toggler}}\n     *        <h4 class=\"modal-title\">I'm a modal title</h4>\n     *    {{/em-modal-title}}\n     *    {{#em-modal-body}}\n     *        One fine body…\n     *    {{/em-modal-body}}\n     *    {{#em-modal-footer}}\n     *    {{#em-modal-toggler}}Close{{/em-modal-toggler}}\n     *    {{/em-modal-footer}}\n     * {{/em-modal}}\n     * {{#em-modal-toggler modal-id=\"modal1\"}}Click me!{{/em-modal-toggler}}\n     * ```\n     *\n     * @class Modal\n     * @event will-open\n     * @event did-open\n     * @event will-close\n     * @public\n     */\n\n    __exports__[\"default\"] = Em.Component.extend(WithConfigMixin, StyleBindingsMixin, {\n      /**\n       * Properties bound as attributes the DOM element.\n       * see documentation per property.\n       * @property panels\n       * @private\n       * @type Array\n       */\n      attributeBindings: ['is-open', 'did-open', 'tabindex'],\n      classNameBindings: ['styleClasses', 'styleOpenningClasses'],\n      styleBindings: ['display'],\n\n      /**\n       * Define the tabindex DOM property.\n       * Required otherwise no keyDown events\n       * @property tabindex\n       */\n      tabindex: 0,\n\n      /**\n       * The CSS classes that will be attached to the DOM element of the modal\n       * Classes should be configured externally by using the `config` object.\n       * @property styleClasses\n       * @private\n       * @type String\n       */\n      styleClasses: (function() {\n        var _ref;\n        return (_ref = this.get('config.modal.classes')) != null ? _ref.join(\" \") : void 0;\n      }).property('config.modal.classes'),\n\n      /**\n       * The class name that will be set when the modal gets opened\n       * @property styleOpenningClasses\n       * @public\n       */\n      styleOpenningClasses: (function() {\n        if (this.get('did-open')) {\n          return \"in\";\n        } else {\n          return \"\";\n        }\n      }).property('did-open'),\n\n      /*\n       * The CSS `display` property state.\n       * @property display\n       * @public\n       */\n      display: (function() {\n        if (this.get('did-open')) {\n          return 'block';\n        } else {\n          return 'none';\n        }\n      }).property('did-open'),\n\n      /**\n       * `show` property is bound to the DOM element as an attribute.\n       * This property is set to true immediately when the `toggleVisibility` method is invoked.\n       *\n       * This property can be used to start a transitioning effect, for example:\n       * ```css\n       *   em-modal[show] {\n       *     opacity: 0;\n       *     transition: opacity 100ms ease;\n       *   }\n       * ```\n       * \n       * The transition effect should be ended when the modal is gets visible, see the property `shown` for more info.\n       * @property opened\n       * @see 'did-open'\n       * @private\n       */\n      'is-open': false,\n\n      /**\n       * A property bound to the DOM element that indicates that the modal has been made visible to the user. \n       * (after the DOM element was set with `display: block;`)\n       *\n       * This proeprty can be used by CSS to end a transitioning effect by setting the CSS `opacity` to a higher number, for example:\n       *\n       * ```css\n       *   em-modal[shown] {\n       *     opacity: 1;\n       *   }\n      }\n       * ```\n       * @property did-open\n       * @private\n       */\n      'did-open': false,\n\n      /**\n       * Open modal and make it visible.\n       * @method open\n       * @public\n       */\n      open: function() {\n        this.trigger('show');\n        this.sendAction('on-show', this);\n        this.set('is-open', 'true');\n        return Em.run.schedule('afterRender', this, function() {\n          this.set('did-open', 'true');\n          this.trigger('shown');\n          return Em.run.schedule('afterRender', this, function() {\n            return this.$().focus();\n          });\n        });\n      },\n\n      /**\n       * Close the modal by making it invisible.\n       * @method close\n       * @public\n       */\n      close: function() {\n        this.trigger('hide');\n        this.sendAction('on-hide', this);\n        this.set('is-open', void 0);\n        return this.set('did-open', void 0);\n      },\n\n      /**\n       * Toggle the visibility of the modal based on its current state.\n       * @method toggleVisibility\n       * @public\n       */\n      toggleVisibility: function() {\n        if (this.get('is-open')) {\n          return this.close();\n        } else {\n          return this.open();\n        }\n      },\n\n      /**\n       * Set the title of the modal.\n       * @method setTitle\n       * @private\n       * @type ModalTitle\n       */\n      setTitle: function(title) {\n        return this.set('title', title);\n      },\n\n      /**\n       * Set the toggler of the modal\n       * @method setToggler\n       * @private\n       * @type ModalToggler\n       */\n      setToggler: function(toggler) {\n        return this.set('toggler', toggler);\n      },\n\n      /**\n       * Close the modal if the user clicks outside of the modal space.\n       * @method closeIfClickedOutside\n       * @private\n       */\n      closeIfClickedOutside: (function(e) {\n        if (e.target !== this.get('element')) {\n          return;\n        }\n        return this.close();\n      }).on('click'),\n\n      /**\n       * Handle keyboard events\n       * @method handleKeyboard\n       * @private\n       */\n      handleKeyboard: (function(e) {\n        switch (e.keyCode) {\n          case 27:\n            return this.close();\n        }\n      }).on('keyDown'),\n\n      /**\n       * Consumer can bind this property for a more fine grained control over when the modal is opened,\n       * This is good for situations where openning the modal via the `toggler` is not enough.\n       *\n       * @property open-if\n       * @public\n       */\n      'open-if': false,\n\n      /**\n       * observers the `open-if` property, if set to true, then open the modal.\n       * @method openIf\n       * @private\n       */\n      openIf: (function() {\n        if (!this.get('open-if')) {\n          return;\n        }\n        this.open();\n        return this.set('open-if', false);\n      }).observes('open-if'),\n\n      /**\n       * Consumer can bind this property for a more fine grained control over when the modal is closed,\n       * This is good for situations where closing the modal via the `toggler` is not enough.\n       *\n       * @property close-if\n       * @public\n       */\n      'close-if': false,\n\n      /**\n       * observers the `close-if` property, if set to true, then close the modal.\n       * @method closeIf\n       * @private\n       */\n      closeIf: (function() {\n        if (!this.get('close-if')) {\n          return;\n        }\n        this.close();\n        return this.set('close-if', false);\n      }).observes('close-if')\n    });\n  });","define(\"ember-idx-modal\", [\"ember-idx-modal/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-idx-utils/config\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Namespace.extend({\n      _configs: Em.Object.create(),\n      getConfig: function(name) {\n        var config;\n        config = this._configs.get(name);\n        return config;\n      },\n      addConfig: function(name, config) {\n        var defaultConfig, newConfig;\n        defaultConfig = this._configs.get('default');\n        newConfig = Em.Object.create(config);\n        newConfig = Em.$.extend(true, newConfig, defaultConfig);\n        return this._configs.set(name, newConfig);\n      }\n    });\n  });","define(\"ember-idx-utils/mixin/hotkeys-bindings\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    /**\n     * A mixin to enhance an `Ember.View` with hotkey support.\n     * \n     * To use, inherit this mixin in your view:\n     *\n     * ```javascript\n     * MyView = Em.View.extend(HotkeysMixin, {\n     *   hotkeysBindings: ['ctrl-a']\n     *\n     *   actions: {\n     *       'ctrl-a': function() {\n     *           console.log(\"Ctrl-a was pressed!\");\n     *       }\n     *   }\n     * });\n     * ```\n     *\n     * @class HotkeysMixin\n     * @public\n     */\n    __exports__[\"default\"] = Em.Mixin.create({\n      /**\n       * Add `hotkeysBindings` property as a `concatenatedProperties`.\n       * @property concatenatedProperties\n       * @type array\n       */\n      concatenatedProperties: ['hotkeysBindings'],\n      keyMap: {\n        8: \"backspace\",\n        9: \"tab\",\n        13: \"return\",\n        16: \"shift\",\n        17: \"ctrl\",\n        18: \"alt\",\n        224: \"meta\",\n        112: \"f1\",\n        113: \"f2\",\n        114: \"f3\",\n        115: \"f4\",\n        116: \"f5\",\n        117: \"f6\",\n        118: \"f7\",\n        119: \"f8\",\n        120: \"f9\",\n        121: \"f10\",\n        122: \"f11\",\n        123: \"f12\"\n      },\n      keyPressHandler: function(e) {\n        var command;\n        command = \"\";\n        if (e.ctrlKey) {\n          command += \"ctrl+\";\n        }\n        if (e.altKey) {\n          command += \"alt+\";\n        }\n        if (e.shiftKey) {\n          command += \"shift+\";\n        }\n        if (e.metaKey) {\n          command += \"meta+\";\n        }\n        if (this.keyMap[e.which]) {\n          command += this.keyMap[e.which];\n        } else {\n          command += String.fromCharCode(e.which).toLowerCase();\n        }\n        Em.debug(\"hotkey command: \" + command);\n        return this.send(command);\n      },\n      keyDown: function(e) {\n        return this.keyPressHandler(e);\n      },\n      keyUp: function(e) {\n        return this.keyPressHandler(e);\n      },\n      keyPress: function(e) {\n        return this.keyPressHandler(e);\n      }\n    });\n  });","define(\"ember-idx-utils/mixin/style-bindings\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    /**\n     * Provides styleBindings property to bind style \n     * properties based on object properties.\n     *\n     * @class StyleBindingsMixin\n     * @public\n     */\n    __exports__[\"default\"] = Em.Mixin.create({\n\n      /**\n       * Add `styleBindings` property as a `concatenatedProperties`.\n       * @property concatenatedProperties\n       * @type array\n       */\n      concatenatedProperties: ['styleBindings'],\n\n      /**\n       * Apply the `style` attribute to the DOM element.\n       * @property attributeBindings\n       * @type array\n       */\n      attributeBindings: ['style'],\n\n      /**\n       * The default unit for numbered value.\n       * @property unit\n       * @type string\n       */\n      unit: 'px',\n\n      /**\n       * Build a style property and its value as a string.\n       * @method buildStyleString\n       * @param {String} style property name\n       * @param {String} property name in the current object that should be resolved as the\n       * value of the style property.\n       * @private\n       */\n      buildStyleString: function(styleName, property) {\n        var value;\n        value = this.get(property);\n        if (value === void 0) {\n          return;\n        }\n        if (Em.typeOf(value) === \"number\") {\n          value = value + this.get(\"unit\");\n        }\n        return styleName + \":\" + value + \";\";\n      },\n\n      /**\n       * Apply the style bindings during the view `init` phase.\n       *\n       * This method assumes that the attribute `styleBindings` is defined as an array of strings where\n       * each string is a property name that should be resolved as a style option.\n       *\n       * @method applyBindings\n       * @private\n       */\n      applyBindings: (function() {\n        var lookup, properties, styleBindingsstyleBindings, styleComputed, styles;\n        if (!(styleBindingsstyleBindings = this.styleBindings)) {\n          return;\n        }\n        lookup = {};\n        this.styleBindings.forEach(function(binding) {\n          var propArr, property, style;\n          propArr = binding.split(\":\");\n          property = propArr[0];\n          style = propArr[1];\n          return lookup[style || property] = property;\n        });\n        styles = Em.keys(lookup);\n        properties = styles.map(function(style) {\n          return lookup[style];\n        });\n        styleComputed = Em.computed(function() {\n          var styleString, styleTokens;\n          styleTokens = styles.map((function(_this) {\n            return function(style) {\n              return _this.buildStyleString(style, lookup[style]);\n            };\n          })(this));\n          styleString = styleTokens.join(\"\");\n          if (styleString.length !== 0) {\n            return styleString;\n          }\n        });\n        styleComputed.property.apply(styleComputed, properties);\n        return Em.defineProperty(this, \"style\", styleComputed);\n      }).on('init')\n    });\n  });","define(\"ember-idx-utils/mixin/with-config\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Mixin.create({\n      configName: (function() {\n        var config;\n        config = this.nearestWithProperty('configName');\n        if (config) {\n          return config.get('configName');\n        } else {\n          return 'default';\n        }\n      }).property(),\n      config: (function() {\n        return Em.Config.getConfig(this.get('configName'));\n      }).property('configName')\n    });\n  });","define(\"ember-idx-utils/utils/delay\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    var delay = function(ms) {\n      ms = ms || 1500;\n      return new Em.RSVP.Promise(function(resolve) {\n        Em.run.later(this, resolve, ms);\n      });\n    };\n\n    __exports__[\"default\"] = delay;\n  });","define(\"ember-idx-utils\", [\"ember-idx-utils/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChprQA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}