{"version":3,"sources":["ember-idx-utils/config.js","ember-idx-utils/mixin/hotkeys-bindings.js","ember-idx-utils/mixin/style-bindings.js","ember-idx-utils/mixin/with-config.js","ember-idx-utils/utils/delay.js","__reexport.js"],"sourcesContent":["define(\"ember-idx-utils/config\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Namespace.extend({\n      _configs: Em.Object.create(),\n      getConfig: function(name) {\n        var config;\n        config = this._configs.get(name);\n        return config;\n      },\n      addConfig: function(name, config) {\n        var defaultConfig, newConfig;\n        defaultConfig = this._configs.get('default');\n        newConfig = Em.Object.create(config);\n        newConfig = Em.$.extend(true, newConfig, defaultConfig);\n        return this._configs.set(name, newConfig);\n      }\n    });\n  });","define(\"ember-idx-utils/mixin/hotkeys-bindings\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    /**\n     * A mixin to enhance an `Ember.View` with hotkey support.\n     * \n     * To use, inherit this mixin in your view:\n     *\n     * ```javascript\n     * MyView = Em.View.extend(HotkeysMixin, {\n     *   hotkeysBindings: ['ctrl-a']\n     *\n     *   actions: {\n     *       'ctrl-a': function() {\n     *           console.log(\"Ctrl-a was pressed!\");\n     *       }\n     *   }\n     * });\n     * ```\n     *\n     * @class HotkeysMixin\n     * @public\n     */\n    __exports__[\"default\"] = Em.Mixin.create({\n      /**\n       * Add `hotkeysBindings` property as a `concatenatedProperties`.\n       * @property concatenatedProperties\n       * @type array\n       */\n      concatenatedProperties: ['hotkeysBindings'],\n      keyMap: {\n        8: \"backspace\",\n        9: \"tab\",\n        13: \"return\",\n        16: \"shift\",\n        17: \"ctrl\",\n        18: \"alt\",\n        224: \"meta\",\n        112: \"f1\",\n        113: \"f2\",\n        114: \"f3\",\n        115: \"f4\",\n        116: \"f5\",\n        117: \"f6\",\n        118: \"f7\",\n        119: \"f8\",\n        120: \"f9\",\n        121: \"f10\",\n        122: \"f11\",\n        123: \"f12\"\n      },\n      keyPressHandler: function(e) {\n        var command;\n        command = \"\";\n        if (e.ctrlKey) {\n          command += \"ctrl+\";\n        }\n        if (e.altKey) {\n          command += \"alt+\";\n        }\n        if (e.shiftKey) {\n          command += \"shift+\";\n        }\n        if (e.metaKey) {\n          command += \"meta+\";\n        }\n        if (this.keyMap[e.which]) {\n          command += this.keyMap[e.which];\n        } else {\n          command += String.fromCharCode(e.which).toLowerCase();\n        }\n        Em.debug(\"hotkey command: \" + command);\n        return this.send(command);\n      },\n      keyDown: function(e) {\n        return this.keyPressHandler(e);\n      },\n      keyUp: function(e) {\n        return this.keyPressHandler(e);\n      },\n      keyPress: function(e) {\n        return this.keyPressHandler(e);\n      }\n    });\n  });","define(\"ember-idx-utils/mixin/style-bindings\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    /**\n     * Provides styleBindings property to bind style \n     * properties based on object properties.\n     *\n     * @class StyleBindingsMixin\n     * @public\n     */\n    __exports__[\"default\"] = Em.Mixin.create({\n\n      /**\n       * Add `styleBindings` property as a `concatenatedProperties`.\n       * @property concatenatedProperties\n       * @type array\n       */\n      concatenatedProperties: ['styleBindings'],\n\n      /**\n       * Apply the `style` attribute to the DOM element.\n       * @property attributeBindings\n       * @type array\n       */\n      attributeBindings: ['style'],\n\n      /**\n       * The default unit for numbered value.\n       * @property unit\n       * @type string\n       */\n      unit: 'px',\n\n      /**\n       * Build a style property and its value as a string.\n       * @method buildStyleString\n       * @param {String} style property name\n       * @param {String} property name in the current object that should be resolved as the\n       * value of the style property.\n       * @private\n       */\n      buildStyleString: function(styleName, property) {\n        var value;\n        value = this.get(property);\n        if (value === void 0) {\n          return;\n        }\n        if (Em.typeOf(value) === \"number\") {\n          value = value + this.get(\"unit\");\n        }\n        return styleName + \":\" + value + \";\";\n      },\n\n      /**\n       * Apply the style bindings during the view `init` phase.\n       *\n       * This method assumes that the attribute `styleBindings` is defined as an array of strings where\n       * each string is a property name that should be resolved as a style option.\n       *\n       * @method applyBindings\n       * @private\n       */\n      applyBindings: (function() {\n        var lookup, properties, styleBindingsstyleBindings, styleComputed, styles;\n        if (!(styleBindingsstyleBindings = this.styleBindings)) {\n          return;\n        }\n        lookup = {};\n        this.styleBindings.forEach(function(binding) {\n          var propArr, property, style;\n          propArr = binding.split(\":\");\n          property = propArr[0];\n          style = propArr[1];\n          return lookup[style || property] = property;\n        });\n        styles = Em.keys(lookup);\n        properties = styles.map(function(style) {\n          return lookup[style];\n        });\n        styleComputed = Em.computed(function() {\n          var styleString, styleTokens;\n          styleTokens = styles.map((function(_this) {\n            return function(style) {\n              return _this.buildStyleString(style, lookup[style]);\n            };\n          })(this));\n          styleString = styleTokens.join(\"\");\n          if (styleString.length !== 0) {\n            return styleString;\n          }\n        });\n        styleComputed.property.apply(styleComputed, properties);\n        return Em.defineProperty(this, \"style\", styleComputed);\n      }).on('init')\n    });\n  });","define(\"ember-idx-utils/mixin/with-config\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Mixin.create({\n      configName: (function() {\n        var config;\n        config = this.nearestWithProperty('configName');\n        if (config) {\n          return config.get('configName');\n        } else {\n          return 'default';\n        }\n      }).property(),\n      config: (function() {\n        return Em.Config.getConfig(this.get('configName'));\n      }).property('configName')\n    });\n  });","define(\"ember-idx-utils/utils/delay\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    var delay = function(ms) {\n      ms = ms || 1500;\n      return new Em.RSVP.Promise(function(resolve) {\n        Em.run.later(this, resolve, ms);\n      });\n    };\n\n    __exports__[\"default\"] = delay;\n  });","define(\"ember-idx-utils\", [\"ember-idx-utils/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;","file":"ember-idx-utils.js"}