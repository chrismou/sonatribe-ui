{
  "name": "torii",
  "version": "0.2.2",
  "description": "A set of clean abstractions for authentication in Ember.js",
  "main": "dist/commonjs/main.js",
  "directories": {
    "lib": "lib"
  },
  "files": [
    "dist/",
    "ember-addon/",
    "bower.json"
  ],
  "ember-addon": {
    "main": "ember-addon/index.js"
  },
  "devDependencies": {
    "connect-redirection": "0.0.1",
    "grunt": "~0.4.2",
    "grunt-banner": "^0.2.3",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-concat": "~0.5.0",
    "grunt-contrib-connect": "~0.7.1",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-testem": "~0.5.14",
    "grunt-contrib-uglify": "~0.6.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-contrib-yuidoc": "~0.5.0",
    "grunt-es3-safe-recast": "^0.1.0",
    "grunt-es6-module-transpiler": "~0.6.0",
    "jshint": "~2.5.6",
    "load-grunt-config": "~0.14.0",
    "load-grunt-tasks": "~1.0.0"
  },
  "scripts": {
    "test": "grunt test",
    "prepublish": "grunt build"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vestorly/torii.git"
  },
  "bugs": {
    "url": "https://github.com/vestorly/torii/issues"
  },
  "keywords": [
    "authentication",
    "ember.js",
    "ember-addon"
  ],
  "author": {
    "name": "Vestorly",
    "email": "hello@vestorly.com"
  },
  "contributors": [
    {
      "name": "Matt Beale",
      "email": "matt.beale@madhatted.com"
    },
    {
      "name": "Cory Forsyth",
      "email": "cory.forsyth@gmail.com"
    },
    {
      "name": "Vestorly",
      "email": "hello@vestorly.com"
    }
  ],
  "maintainers": [
    {
      "name": "Matt Beale",
      "email": "matt.beale@madhatted.com"
    },
    {
      "name": "Cory Forsyth",
      "email": "cory.forsyth@gmail.com"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "broccoli-string-replace": "^0.0.2"
  },
  "readme": "[![Torii Build Status](https://circleci.com/gh/Vestorly/torii.png?circle-token=9bdd2f37dbcb0be85f82a6b1ac61b9333b68625b \"Torii Build Status\")](https://circleci.com/gh/Vestorly/torii)\n\nTorii is a set of clean abstractions for authentication in [Ember.js](http://emberjs.com/)\napplications. Torii is built with **providers** (authentication against a platform), a\n**session manager** (for maintaining the current user), and **adapters** (to persist\nauthentication state).\n\nThe API for providers and adapters in Torii is to **open**, by which we mean creating a new\nauthorization or authenticating a new session, **fetch**, by which we mean validating\nan existing authorization (like a session stored in cookies), or **close**, where an\nauthorization is destroyed.\n\nA provider in Torii is anything a user can authenticate against. This could be an\nOAuth 2.0 endpoint, your own login mechanism, or an SDK like Facebook Connect.\nAuthenticating against a **provider** is done via the `torii` property, which is injected\non to routes:\n\n```hbs\n{{! app/templates/post.hbs }}\n{{#if hasFacebook}}\n  {{partial \"comment-form\"}}\n{{else}}\n  <a href=\"#\" {{action 'signInToComment'}}>\n    Sign in to comment\n  </a>\n{{/if}}\n```\n\n```JavaScript\n// app/routes/post.js\nexport default Ember.Route.extend({\n  actions: {\n    signInToComment: function(){\n      var controller = this.controllerFor('post');\n      // The provider name is passed to `open`\n      this.get('torii').open('facebook-connect').then(function(authorization){\n        // FB.api is now available. authorization contains the UID and\n        // accessToken.\n        controller.set('hasFacebook', true);\n      });\n    }\n  }\n});\n```\n\n```\ntorii.open('facebook') -> #open hook on the facebook provider -> returned authorization\n```\n\nThis is authentication only against a provider. If your application provides\nan **adapter**, then Torii can also peform **session management** via the\n`session` property, injected onto routes and controllers. This example uses\nFacebook's OAuth 2.0 API directly to fetch an authorization code.\n\n```hbs\n{{! app/templates/login.hbs }}\n{{if session.isWorking}}\n  One sec while we get you signed in...\n{{else}}\n  {{error}}\n  <a href=\"#\" {{action 'signInViaFacebook'}}>\n    Sign In with Facebook\n  </a>\n{{/if}}\n```\n\n```JavaScript\n// app/routes/login.js\nexport default Ember.Route.extend({\n  actions: {\n    signInViaFacebook: function(){\n      var route = this,\n          controller = this.controllerFor('login');\n      // The provider name is passed to `open`\n      this.get('session').open('facebook-oauth2').then(function(){\n        route.transitionTo('dashboard');\n      }, function(error){\n        controller.set('error', 'Could not sign you in: '+error.message);\n      });\n    }\n  }\n});\n```\n\n```JavaScript\n// app/torii-adapters/application.js\nexport default Ember.Object.extend({\n  open: function(authentication){\n    var authorizationCode = authentication.authorizationCode;\n    return new Ember.RSVP.Promise(function(resolve, reject){\n      Ember.$.ajax({\n        url: 'api/session',\n        data: { 'facebook-auth-code': authorizationCode },\n        dataType: 'json',\n        success: Ember.run.bind(null, resolve),\n        error: Ember.run.bind(null, reject)\n      });\n    }).then(function(user){\n      // The returned object is merged onto the session (basically). Here\n      // you may also want to persist the new session with cookies or via\n      // localStorage.\n      return {\n        currentUser: user\n      };\n    });\n  }\n});\n```\n\n```\nsession.open('facebook') -> #open hook on the facebook provider -> #open hook on the application adapter -> updated session\n```\n\nNote that the adapter section is left entirely to your application.\n\n## Using Torii\n\nUsing Torii currently requires an AMD-compatible module loader. [Ember-CLI](http://www.ember-cli.com/) provide this out of the box.\n\n### Using Torii as an ember-addon\n\nTorii is configured to be compatible with the ember-cli\n[ember-addon](http://reefpoints.dockyard.com/2014/06/24/introducing_ember_cli_addons.html)\nfunctionality, as of ember-cli version 0.0.37.\n\nIf you are using ember-cli at version 0.0.37 or later, you can simply install the torii npm module:\n\n`npm install torii --save-dev`\n\nThe ember-addon hooks will include torii into your app and add its\ninitializers.\n\n### Using Torii via bower\n\nTorii is also published as a bower package (as named amd modules).\nInstall via bower:\n\n`bower install torii`\n\nNext, **add Torii to your build pipeline**. In Ember-App-Kit you do this\nin `app/index.html`. In Ember-CLI, you add the package to the `Brocfile.js`:\n\n```\n// Your path to torii may be different than the one below, depending on\n// your bower configuration.\napp.import('vendor/torii/dist/torii.amd.js');\n```\n\n**Add Torii's intialization code to your app**. Torii exports an amd module named `torii/load-initializers`, which will\nadd the appropriate application initializers to do Torii's container registrations and injections.\nYou will want to add `require('torii/load-initializers')['default']();` to your `app.js` file after you've defined your app\nand before you've created it.\nHere is an [example app.js](https://gist.github.com/bantic/b86787ed315c5ef98323).\n\n## Configuring a Torii provider\n\nNow that you have added Torii to your application, you will want to\nconfigure at least one authentication provider. Torii looks for a global\nobject at `window.ENV.torii.providers` that defines a hash of provider\nnames and their options.\n\n**Configure a Torii provider**. Torii comes with a `facebook-connect`\nprovider included. To configure torii for the 'facebook-connect'\nprovider with ember-cli, simply add `torii` to your `config/environment.js` file:\n\n```JavaScript\n/* jshint node: true */\nmodule.exports = function(environment) {\n  var ENV = {\n    /* ... */\n    torii: {\n      providers: {\n        'facebook-connect': {\n        appId: 'xxxxx-some-app-id',\n        scope: 'email,birthday'\n      }\n    }\n  };\n  return ENV;\n};\n```\n\nFor a non-ember-cli application, you can set the same values on `ENV`:\n\n```JavaScript\n// In Ember-App-Kit you will set this in app/index.html\nwindow.ENV = window.ENV || {};\nwindow.ENV['torii'] = {\n  providers: {\n    'facebook-connect': {\n      appId: 'xxxxx-some-app-id',\n      scope: 'email,birthday'\n    }\n  }\n};\n```\n\nWith those values, we can authenticate the user against Facebook Connect\nvia the `torii` property injected onto _routes_, or the `session` property\ninjected onto routes and controllers (using the session management feature\nwill require you to write an adapter for your application â€“ see notes on session management below).\n\n## Providers in Torii\n\nTorii is built with several providers for common cases. If you intend to\nuse another provider for authentication, you will need to create your\nown.\n\n### Writing a provider\n\nProviders have a single hook, `open`, that must be implemented. It *must* return a\npromise:\n\n* `open` creates a new authorization. An example of this is logging in a\n  user in with their username and password, or interfacing with an\n  external OAuth provider like Facebook to retrieve authorization data.\n\nTorii will lookup providers in the Ember application container, so if you\nname them conventionally (put them in the `app/torii-providers` directory)\nthey will be available automatically when using ember-cli or ember app\nkit.\n\nA minimal provider:\n\n```JavaScript\n// app/torii-providers/geocities.js\nexport default Ember.Object.extend({\n  // create a new authorization\n  open: function(options) {\n    return new Ember.RSVP.Promise(function(resolve, reject){\n      // resolve with an authorization object\n    });\n  }\n});\n```\n\nProvider hooks should return a promise resolving with an authorization\nobject. Authorization objects should include values like access tokens, or\nan Ember-Data model representing a session, or minimal user data like UIDs.\nThey may return SDK objects, such as an object with an API for making\nauthenticated calls to an API.\n\nWhen used via `torii.open`, the authorization object is passed through to\nthe consumer. An example provider called 'geocities':\n\n```JavaScript\n// app/torii-providers/geocities.js\nexport default Ember.Object.extend({\n  // credentials as passed from torii.open\n  open: function(credentials){\n    return new Ember.RSVP.Promise(function(resolve, reject){\n      exampleAsyncLogin(\n        credentials.username,\n        credentials.password,\n\n        // callback function:\n        function(error, response) {\n          // the promise is resolved with the authorization\n          Ember.run.bind(null, resolve, {sessionToken: response.token});\n        }\n      );\n    });\n  }\n});\n```\n\n```JavaScript\n// app/routes/application.js\nexport default Ember.Route.extend({\n  actions: {\n    openGeocities: function(username, password){\n      var route = this;\n      var providerName = 'geocities';\n      // argument to open is passed into the provider\n      this.get('torii').open(providerName, {\n        username: username,\n        password: password\n      }).then(function(authorization){\n        // authorization as returned by the provider\n        route.somethingWithGeocitiesToken(authorization.sessionToken);\n      });\n    }\n  }\n});\n```\n\nThe cornerstone of many Torii providers is the `popup` object, which is injected\nonto all providers.\n\n### Built-in providers\n\nTorii comes with several providers already included:\n\n  * Github OAuth2 ([Dev Site](https://github.com/settings/applications) | [Docs](https://developer.github.com/v3/oauth/))\n  * LinkedIn OAuth2 ([Dev Site](https://www.linkedin.com/secure/developer) | [Docs](http://developer.linkedin.com/))\n  * Google OAuth2 ([Dev Site](https://console.developers.google.com/project) | [Docs](https://developers.google.com/accounts/docs/OAuth2WebServer))\n  * Facebook Connect (via FB SDK) ([Dev Site](https://developers.facebook.com/) | [Docs](https://developers.facebook.com/docs/))\n  * Facebook OAuth2 ([Dev Site](https://developers.facebook.com/) | [Docs](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/))\n  * **Authoring custom providers is designed to be easy** - You are encouraged to author your own.\n\n### Supporting OAuth 1.0a\n\nOAuth 1.0a, used by Twitter and some other organizations, requires a significant\nserver-side component and so cannot be supported out of the box. It can be implemented\nfollowing these steps:\n\n  1. Torii provider opens a popup to the app server asking for Twitter auth\n  2. Server redirects to Twitter with the credentials for login\n  3. User enters their credentials at Twitter\n  4. Twitter redirects to app server which completes the authentication\n  5. Server loads the Ember application with a message in the URL, or otherwise\n     transmits a message back to the parent window.\n  6. Ember application in the initial window closes the popup and resolves its\n     provider promise.\n\n## Session Management in Torii\n\nIf you want to use torii's session management state machine, you _must_ opt in to it via the torii configuration.\nBecause of the potential for conflicts, **torii will not inject a `session` property** unless you explicitly ask for\nit in your configuration. To do so, specify a `sessionServiceName` in your torii config.\n\nTo add a session service in Ember-CLI, simply:\n\n```JavaScript\n// config/environment.js\n/* ... */\n    torii: {\n      // a 'session' property will be injected on routes and controllers\n      sessionServiceName: 'session'\n    }\n/* ... */\n```\n\nOr to do the same in a global configuratoin\n\n```JavaScript\nwindow.ENV = window.ENV || {};\nwindow.ENV['torii'] = {\n  sessionServiceName: 'session', // a 'session' property will be injected on routes and controllers\n\n  // ... additional configuration for providers, etc\n};\n```\n\nRead on about adapters for more information on using torii's session management.\n\n## Adapters in Torii\n\nAdapters in Torii process authorizations and pass data to the session. For\nexample, a provider might create an authorization object from the Facebook\nOAuth 2.0 API, then create a session on your applications server. The adapter\nwould then fetch the user and resolve with that value, adding it to the\n`sessions` object.\n\nAgain, adapters are looked up on the container, and so if you name them\nconventionally (put the in `app/torii-adapters/`) then they are loaded\nautomatically.\n\nAdapters have three hooks that may be implemented. Each *must* return a\npromise:\n\n* `open` - a new session\n* `fetch` - a refreshed session\n* `close` - a closing session\n\nAdapters are flexible, but a common use would be to fetch a current user\nfor the session. By default, the `application` adapter will handle all\nauthorizations. An example application adapter with an `open` hook:\n\n```JavaScript\n// app/torii-adapters/application.js\n//\n// Here we will presume the store has been injected onto torii-adapter\n// factories. You would do this with an initializer, e.g.:\n//\n// application.inject('torii-adapter', 'store', store:main');\n//\nexport default Ember.Object.extend({\n\n  // The authorization argument passed in to `session.open` here is\n  // the result of the `torii.open(providerName)` promise\n  open: function(authorization){\n    var userId = authorization.user,\n        store  = this.get('store');\n    return store.find('user', userId).then(function(user){\n      return {\n        currentUser: user\n      };\n    });\n  }\n});\n```\n\nThe object containing the `currentUser` is merged onto the session. Because the\nsession is injected onto controllers and routes, these values will be available\nto templates.\n\nTorii will first look for an adapter matching the provider name passed to\n`session.open` (i.e., if you do `session.open('geocities')`, torii first looks\nfor an adapter at `torii-adapters/geocities`). If there is no matching adapter,\nthen the session object will fall back to using the `application` adapter.\n\n## Running the tests locally\n\n  * Clone the repo `git clone git@github.com:Vestorly/torii.git`, `cd torii/`\n  * `npm install`, which will also run `bower install`\n  * `grunt test` for tests.\n  * Or, to run tests in the browser:\n    * Start the server: `grunt server`\n    * Open [http://localhost:8000/test/](http://localhost:8000/test/)\n\n## Running the torii examples locally\n\n  * Clone the repo `git clone git@github.com:Vestorly/torii.git`, `cd torii/`\n  * `npm install`, which will also run `bower install`\n\nThe torii example apps (at facebook, google, linkedin, etc) are all\nconfigured to use\n`http://torii-example.com:8000/example/basic.html` as their redirect\nuri, so you will need to make an alias in your hosts file that points\n**torii-example.com** to localhost, and you must view the examples from\nthat same host.\n\nTo add this hostname on a Mac:\n  * `sudo vim /etc/hosts`\n  * Add line like this: `127.0.0.1 torii-example.com`\n\nThe `/etc/hosts` equivalent filepath on Windows is:\n`%SystemRoot%\\system32\\drivers\\etc\\hosts`.\n\nFor more info, see [Hosts at wikipedia](http://en.wikipedia.org/wiki/Hosts_(file)).\n\nNow, start your server and visit the page:\n\n  * `grunt server`\n  * open `http://torii-example.com/example/basic.html`\n\n## Generate docs\n\nUse [YUIDoc](http://yui.github.io/yuidoc/).\n\n  * Install: `npm install -g yuidocjs`\n  * Generate: `yuidoc lib/`\n  * Output will be put into \"docs/\"\n\n## Release a new version\n\n  * Bump version in package.json\n  * Bump version in bower.json\n  * `grunt build-release`\n  * Force commit new/changed files in dist/\n  * Commit changed bower.json, package.json\n  * `git tag <version>`\n  * `git push --tags`\n  * Publishing a version git tag will automatically register a new bower\n    version\n  * To publish the updated npm module, `npm publish ./`\n\n## How to help\n\n*Initial development of Torii was generously funded by\n[Vestorly](https://www.vestorly.com/). Vestorly is a technology company\nsolving the client acquisition problem for professionals in wealth\nmanagement, and the enterprises that support them. Vestorly's user\ninterface is built entirely with Ember.js and modern web technologies.\n[hello@vestorly.com](hello@vestorly.com)*\n\nTorii aims to provide a flexible set of primitives for creating your\napplication' own authentication solution. There are still a few things\nwe could use help with:\n\n* A non-AMD build of the code\n* More testing of sessions\n* More documentation\n* Publish your own provider or adapter implementation!\n\nWe welcome your contributions.\n",
  "readmeFilename": "README.md",
  "_id": "torii@0.2.2",
  "_from": "torii@"
}
